apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otelback
  labels:
    app: opentelemetry
    app.kubernetes.io/component: otelback-statefullset
spec:
  mode: statefulset
  replicas: 2
  serviceAccount: otelcontribcol
  image: otel/opentelemetry-collector-contrib:0.116.1
  args:
    feature-gates:"processor.tailsamplingprocessor.metricstatcountspanssampled"
  observability:
    metrics:
      enableMetrics: true
  env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: DT_ENDPOINT
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dynatrace_oltp_url
    - name: DT_API_TOKEN
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dt_api_token
    - name: CLUSTERNAME
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: clustername
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.labels['app.kubernetes.io/component']
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: service.name=$(OTEL_SERVICE_NAME)
  config:
    receivers:



      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 5s
              static_configs:
                - targets:
                    - ${MY_POD_IP}:8888



      otlp:
        protocols:
          grpc: {}
          http: {}
    processors:
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

      filter:
        error_mode: ignore
        metrics:
          metric:
            - 'type == METRIC_DATA_TYPE_SUMMARY'

      memory_limiter:
        check_interval: 1s
        limit_percentage: 70
        spike_limit_percentage: 30






      cumulativetodelta: {}

      tail_sampling:

        policies: [

          {
            name: test-policy-2,
            type: latency,
            latency: { threshold_ms: 100 }
          },
          {
            # Rule 2: low sampling for the otelcollector trances
            name: team_oteldemo,
            type: and,
            and:
              {
                and_sub_policy:
                  [
                    {
                      # filter by service name
                      name: service-name-policy,
                      type: string_attribute,
                      string_attribute:
                        {
                          key: service.name,
                          values: [ otelcol-contrib ],
                        }
                    },
                    {
                      # apply probabilistic sampling
                      name: probabilistic-policy,
                      type: probabilistic,
                      probabilistic: { sampling_percentage: 0.1 },
                    }
                  ]
              }
          },
          {
            # Rule 2: low sampling for the otelcollector trances
            name: team_a-probe,
            type: and,
            and:
              {
                and_sub_policy:
                  [
                    {
                    # filter by service name
                    name: service-name-policy,
                    type: string_attribute,
                    string_attribute:
                      {
                        key: service.name,
                        values: [otelcol-contrib ],
                      }
                    },
                    {
                      # apply probabilistic sampling
                      name: probabilistic-policy,
                      type: probabilistic,
                      probabilistic: { sampling_percentage: 0.1 },
                    }
                    ]
              }
          },


          {


              name: trace-status-policy,
              type: status_code,
              status_code: { status_codes: [ ERROR , UNSET] },


          },
          {
            # Rule 6:
            # always sample if the force_sample attribute is set to true
            name: team-force-sample,
            type: boolean_attribute,
            boolean_attribute: { key: app.force_sample, value: true },
          }

        ]

    exporters:


      otlphttp:
        endpoint: ${DT_ENDPOINT}/api/v2/otlp
        headers:
          Authorization: "Api-Token ${DT_API_TOKEN}"
      debug:
        verbosity: detailed

    service:
      pipelines:

        traces:
          receivers: [otlp]
          processors: [memory_limiter,tail_sampling,batch]
          exporters: [otlphttp]
        metrics:
          receivers: [otlp,prometheus]
          processors: [memory_limiter,cumulativetodelta,filter,batch]
          exporters: [otlphttp]


      telemetry:
        metrics:
          address: ${MY_POD_IP}:8888
        traces:
          processors:
            - batch:
                exporter:
                  otlp:
                    protocol: grpc/protobuf
                    endpoint: http://localhost:4317

